# ==============================================================================
# GitLab CI/CD Pipeline for GitLabMonitor
# ==============================================================================
# This pipeline automates the creation of release packages and GitLab Releases
# whenever a new tag is pushed to the repository.

# Define the stages of the pipeline.
# 1. 'build': Creates the package artifact.
# 2. 'release': Publishes the package and creates the GitLab Release.
stages:
  - build
  - release

# ==============================================================================
# JOB 1: Build the release package
# ==============================================================================
build_package:
  stage: build
  # Use a lightweight base image. 'alpine' is small and fast.
  image: alpine:latest
  
  # This rule ensures the job ONLY runs when a tag is created.
  # It will not run on regular commits to branches.
  rules:
    - if: $CI_COMMIT_TAG

  script:
    # CI_COMMIT_TAG is a predefined variable containing the tag name (e.g., "v2.7.1").
    - echo "Building package for version $CI_COMMIT_TAG..."
    
    # Define the name of the archive we are creating.
    - PACKAGE_NAME="gitlab-monitor-${CI_COMMIT_TAG}.tar.gz"
    
    # Create the compressed archive.
    # We include all the necessary files for a user to run the script.
    - tar -czvf "${PACKAGE_NAME}" \
        gitlab-public-repo-monitor.sh \
        config.conf.example \
        README.md \
        LICENSE \
        template.fr.md \
        template.en.md
        
    - echo "Package ${PACKAGE_NAME} created successfully."

  # 'artifacts' are files that are saved from a job.
  # They can be downloaded from the UI and are passed to subsequent stages.
  artifacts:
    paths:
      - gitlab-monitor-*.tar.gz
    # Keep the artifact for 30 days.
    expire_in: 30 days

# ==============================================================================
# JOB 2: Publish the package and create the GitLab Release
# ==============================================================================
create_release:
  stage: release
  # Use an image that contains 'curl' for making API calls.
  image: curlimages/curl:latest
  
  # This job also runs only for tags.
  rules:
    - if: $CI_COMMIT_TAG
    
  # This job needs the artifact created by 'build_package'.
  needs:
    - job: build_package
      artifacts: true

  script:
    # GitLab provides a secure, temporary token (CI_JOB_TOKEN) for authenticating API calls within a pipeline.
    # CI_API_V4_URL is the base URL for the GitLab API (e.g., "https://git.villejuif.fr/api/v4").
    # CI_PROJECT_ID is the numeric ID of the current project.
    
    - VERSION=$CI_COMMIT_TAG
    - PACKAGE_NAME="gitlab-monitor-${VERSION}.tar.gz"
    - GENERIC_PACKAGE_URL="${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/gitlab-monitor"

    # --------------------------------------------------------------------------
    # 1. Upload the package to the Generic Package Registry
    # --------------------------------------------------------------------------
    - echo "Uploading versioned package to ${GENERIC_PACKAGE_URL}/${VERSION}/${PACKAGE_NAME}..."
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file "${PACKAGE_NAME}" \
           "${GENERIC_PACKAGE_URL}/${VERSION}/${PACKAGE_NAME}"

    - echo "Uploading 'latest' package to ${GENERIC_PACKAGE_URL}/latest/${PACKAGE_NAME}..."
    - |
      curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --upload-file "${PACKAGE_NAME}" \
           "${GENERIC_PACKAGE_URL}/latest/${PACKAGE_NAME}"

    # --------------------------------------------------------------------------
    # 2. Create the GitLab Release using the Releases API
    # --------------------------------------------------------------------------
    # We will try to get the release notes from the file we created earlier.
    # Note: This assumes the release notes file for the tag already exists.
    - RELEASE_NOTES_FILE="release_notes_${VERSION}.md"
    - |
      if [ ! -f "${RELEASE_NOTES_FILE}" ]; then
        echo "Warning: ${RELEASE_NOTES_FILE} not found. Using a generic description."
        DESCRIPTION="Release for version ${VERSION}."
      else
        # The 'sed' command escapes JSON special characters in the release notes.
        DESCRIPTION=$(sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's///g' -e 's/	/\t/g' -e 's/
/\n/g' < "${RELEASE_NOTES_FILE}")
      fi

    - echo "Creating GitLab Release for tag ${VERSION}..."
    - |
      curl --request POST \
           --header "JOB-TOKEN: ${CI_JOB_TOKEN}" \
           --header "Content-Type: application/json" \
           --data '{ "name": "Release '${VERSION}'", "tag_name": "'${VERSION}'", "description": "'"${DESCRIPTION}"'"", "assets": { "links": [{ "name": "Package ('${PACKAGE_NAME}')", "url": "'"${CI_PROJECT_URL}/-/packages/generic/gitlab-monitor/${VERSION}/${PACKAGE_NAME}"'"" }] } }' \
           "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/releases"

    - echo "Release created successfully."
---
stages:
  - build
  - release

build_package:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG'
  script:
    - echo "ðŸ“‚ Debugging file structure"
    - ls -la "${CI_PROJECT_DIR}"
    - VERSIONED_PACKAGE_NAME="gitlab-monitor-${CI_COMMIT_TAG}.tar.gz"
    - LATEST_PACKAGE_NAME="gitlab-monitor-latest.tar.gz"
    - echo "ðŸ“¦ Archiving project files"
    - |
      tar -C "${CI_PROJECT_DIR}" --exclude=.git -czvf \
        "${VERSIONED_PACKAGE_NAME}" .
    - echo "âœ… Package created successfully"
    - cp "${VERSIONED_PACKAGE_NAME}" "${LATEST_PACKAGE_NAME}"
  artifacts:
    paths:
      - "*.tar.gz"
    expire_in: 1 hour

create_release:
  stage: release
  image: registry.gitlab.com/gitlab-org/cli:latest
  tags:
    - VJUNIXINFRA
  rules:
    - if: '$CI_COMMIT_TAG'
  needs:
    - job: build_package
      artifacts: true
  script:
    - echo "--- Creating release with glab ---"
    - echo "CI_COMMIT_TAG: ${CI_COMMIT_TAG}"
    - echo "CI_PROJECT_URL: ${CI_PROJECT_URL}"
    - echo "--- Authenticating with GitLab ---"
    - glab auth login --hostname "${CI_SERVER_HOST}" --token "${RELEASE_ACCESS_TOKEN}"
    - echo "--- Creating release ---"
    - VERSIONED_ASSET="${CI_PROJECT_DIR}/gitlab-monitor-${CI_COMMIT_TAG}.tar.gz"
    - LATEST_ASSET="${CI_PROJECT_DIR}/gitlab-monitor-latest.tar.gz"
    - |
      glab release create "${CI_COMMIT_TAG}" \
        --name "Release ${CI_COMMIT_TAG}" \
        --notes "Version ${CI_COMMIT_TAG}. Voir CHANGELOG.md." \
        "${VERSIONED_ASSET}" \
        "${LATEST_ASSET}"
    - echo "âœ… Release created successfully."
